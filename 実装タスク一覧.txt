TikTok広告運用自動化システム 実装タスク一覧
================================================================================
最終更新日: 2025-10-04（JST）
要件定義バージョン: v2.0
================================================================================

【凡例】
  ■ = フェーズ
  □ = メインタスク
  ├─ = サブタスク
  │  └─ = 詳細タスク
  [依存] = 前提となるタスク
  ⚠️ = 重要・リスク高
  🔄 = 反復・継続タスク

================================================================================
■ Phase 0: 基盤構築 & PoC (Week 1-4)
  目標: TikTok API連携の実証、最小限のCampaign作成・レポート表示
================================================================================

□ Task 0.1: プロジェクト初期セットアップ (Week 1)
  ├─ 0.1.1 技術スタック決定
  │  └─ フロントエンド: React/Next.js or Vue/Nuxt
  │  └─ バックエンド: Node.js/TypeScript or Python/FastAPI
  │  └─ DB: PostgreSQL + Redis
  │  └─ インフラ: AWS/GCP/Azure選定
  │  └─ CI/CD: GitHub Actions
  │
  ├─ 0.1.2 リポジトリ作成・構成
  │  └─ Monorepo (Nx/Turborepo) or Multi-repo判断
  │  └─ ディレクトリ構成設計
  │  └─ README/CONTRIBUTING作成
  │  └─ .gitignore, .editorconfig設定
  │
  ├─ 0.1.3 開発環境構築
  │  └─ Docker Compose (ローカル開発環境)
  │  └─ PostgreSQL, Redis コンテナ
  │  └─ 環境変数管理 (.env.example)
  │  └─ Linter/Formatter (ESLint, Prettier, Black等)
  │
  └─ 0.1.4 基本的なCI/CD構築
     └─ GitHub Actions ワークフロー作成
     └─ Lint/Test自動実行
     └─ ブランチ戦略決定 (Git Flow/GitHub Flow)

□ Task 0.2: TikTok Developer アカウント & Sandbox環境 (Week 1) ⚠️
  ├─ 0.2.1 TikTok for Developers 登録
  │  └─ https://developers.tiktok.com/ でアカウント作成
  │  └─ メールアドレス確認
  │
  ├─ 0.2.2 アプリケーション作成
  │  └─ Developer Portal でアプリ登録
  │  └─ App ID, App Secret 取得
  │  └─ Redirect URI設定 (http://localhost:3000/auth/callback)
  │
  ├─ 0.2.3 Sandbox環境セットアップ
  │  └─ Sandboxモード有効化
  │  └─ テスト用Sandbox作成（最大5個）
  │  └─ テストユーザー追加（最大10名）
  │  └─ Sandbox URLの確認: https://sandbox-ads.tiktok.com/
  │
  └─ 0.2.4 必要な権限（Scope）設定
     └─ Campaign Management
     └─ Reporting
     └─ Creative Management (動画アップロード)

□ Task 0.3: OAuth 2.0 認証フロー実装 (Week 1-2) ⚠️
  ├─ 0.3.1 認証エンドポイント実装
  │  └─ GET /auth/tiktok/login → TikTok OAuth URLへリダイレクト
  │  └─ GET /auth/tiktok/callback → Authorization Code受取
  │  └─ POST TikTok /v2/oauth/token/ → Access Token取得
  │
  ├─ 0.3.2 トークン保存・管理
  │  └─ DBスキーマ設計: oauth_tokens テーブル
  │  └─ KMS/Secrets Manager連携（暗号化保存）
  │  └─ Access Token (24h), Refresh Token (1年) 有効期限管理
  │
  ├─ 0.3.3 トークン自動更新機構
  │  └─ 有効期限30分前にRefresh Token実行
  │  └─ Cron/スケジューラーで定期チェック
  │  └─ 更新失敗時のアラート（Slack通知）
  │
  └─ 0.3.4 OAuth フロー E2Eテスト
     └─ ローカル環境での認証テスト
     └─ トークン取得・保存・更新の動作確認

□ Task 0.4: TikTok API Connector 基盤実装 (Week 2) ⚠️
  ├─ 0.4.1 APIクライアント基底クラス
  │  └─ HTTP Client (axios/fetch) ラッパー
  │  └─ Base URL管理 (Sandbox/Production切替)
  │  └─ 共通ヘッダー設定 (Access-Token, Content-Type)
  │  └─ リクエスト/レスポンスロギング
  │
  ├─ 0.4.2 レート制限管理機構
  │  └─ Token Bucket アルゴリズム実装
  │  └─ エンドポイント別レート管理
  │  └─ 429エラー検知 → 指数バックオフ
  │  └─ Redis でトークンバケット状態管理
  │
  ├─ 0.4.3 エラーハンドリング
  │  └─ TikTok エラーコード別処理
  │     - 40001/40002: OAuth再認証
  │     - 40100: パラメータエラー → 詳細ログ
  │     - 40109: レート制限 → リトライ
  │     - 50000: サーバーエラー → アラート
  │  └─ リトライポリシー（最大3回、指数バックオフ）
  │  └─ サーキットブレーカーパターン
  │
  ├─ 0.4.4 Idempotency Key管理
  │  └─ Key生成関数（UUID + ハッシュ）
  │  └─ リクエストごとのKey付与
  │  └─ DB/Redisでの重複チェック
  │
  └─ 0.4.5 APIクライアント単体テスト
     └─ Mock Server (MSW/nock) でテスト
     └─ レート制限のシミュレーション
     └─ エラーハンドリングのテスト

□ Task 0.5: Campaign Management API 実装 (Week 2-3)
  ├─ 0.5.1 Campaign CRUD実装
  │  └─ POST /v1.2/campaign/create/
  │  └─ GET /v1.3/campaign/get/
  │  └─ POST /v1.2/campaign/update/
  │  └─ POST /v1.2/campaign/delete/（論理削除）
  │
  ├─ 0.5.2 パラメータバリデーション
  │  └─ advertiser_id, campaign_name 必須チェック
  │  └─ objective_type 列挙値チェック
  │  └─ budget_mode, budget 整合性チェック
  │  └─ 最低予算チェック（$50以上）
  │
  ├─ 0.5.3 DBスキーマ実装
  │  └─ campaigns テーブル作成
  │  └─ TikTok campaign_id とのマッピング
  │  └─ status, created_at, updated_at
  │  └─ idempotency_key カラム
  │
  └─ 0.5.4 Campaign作成 E2Eテスト
     └─ Sandboxでの実Campaign作成
     └─ レスポンスのcampaign_id確認
     └─ DB保存確認

□ Task 0.6: Reporting API 実装 (Week 3)
  ├─ 0.6.1 同期レポート取得実装
  │  └─ GET /v1.3/report/integrated/get/
  │  └─ パラメータ構築（data_level, dimensions, metrics）
  │  └─ ページネーション処理（全ページ取得）
  │  └─ レスポンスパース
  │
  ├─ 0.6.2 主要メトリクス取得
  │  └─ impressions, clicks, spend
  │  └─ ctr, cpc, cpm
  │  └─ conversions, cost_per_conversion
  │  └─ video_views, video_view_p25/p50/p75/p100
  │
  ├─ 0.6.3 DBスキーマ実装
  │  └─ metrics テーブル作成
  │  └─ data_level, entity_id, stat_date
  │  └─ メトリクスカラム（JSONB or 個別カラム）
  │  └─ インデックス設計（高速クエリ用）
  │
  └─ 0.6.4 日次バッチジョブ実装
     └─ 前日データ取得スクリプト
     └─ Cron/スケジューラー設定
     └─ 実行ログ・エラーハンドリング

□ Task 0.7: 簡易ダッシュボード実装 (Week 3-4)
  ├─ 0.7.1 フロントエンド初期セットアップ
  │  └─ Next.js/Nuxt プロジェクト作成
  │  └─ UIライブラリ導入（Tailwind CSS, shadcn/ui, Vuetify等）
  │  └─ Chart.js/Recharts/ECharts 導入
  │
  ├─ 0.7.2 認証画面
  │  └─ TikTok OAuth ログインボタン
  │  └─ Callback処理
  │  └─ セッション管理（JWT/Session）
  │
  ├─ 0.7.3 KPIカード表示
  │  └─ 総Spend, 総Impressions, 総Clicks
  │  └─ 平均CPA, 平均CTR, 総Conversions
  │  └─ 前日比較（増減表示）
  │
  ├─ 0.7.4 基本チャート
  │  └─ 日別Spend推移グラフ
  │  └─ Campaign別パフォーマンス比較
  │
  └─ 0.7.5 ダッシュボードE2Eテスト
     └─ ログイン → データ取得 → 表示確認

□ Task 0.8: Phase 0 振り返り & ドキュメント整備 (Week 4)
  ├─ 0.8.1 PoCデモ実施
  │  └─ ステークホルダーへのデモ
  │  └─ フィードバック収集
  │
  ├─ 0.8.2 技術的負債の洗い出し
  │  └─ リファクタリング必要箇所
  │  └─ パフォーマンス改善点
  │
  ├─ 0.8.3 ドキュメント作成
  │  └─ API仕様書（Swagger/OpenAPI）
  │  └─ 環境構築手順
  │  └─ テスト手順書
  │
  └─ 0.8.4 Phase 1計画の詳細化
     └─ タスク見積もり精緻化
     └─ リソース配分計画


================================================================================
■ Phase 1: MVP開発 (Week 5-12)
  目標: 自動Campaign作成、基本最適化、アラート、本番環境移行
================================================================================

□ Task 1.1: データモデル全体設計・実装 (Week 5)
  ├─ 1.1.1 ERD設計
  │  └─ Advertiser, Campaign, AdGroup, Ad
  │  └─ Creative, Metrics, Experiment
  │  └─ Policy, ChangeLog, WebhookEvent, APILog
  │  └─ リレーション定義
  │
  ├─ 1.1.2 マイグレーション作成
  │  └─ テーブル作成スクリプト
  │  └─ インデックス設計
  │  └─ 制約（FK, Unique, Check）
  │
  ├─ 1.1.3 ORM/Query Builder セットアップ
  │  └─ Prisma/TypeORM/SQLAlchemy等
  │  └─ モデル定義
  │  └─ Seed データ作成
  │
  └─ 1.1.4 Repository層実装
     └─ CRUD操作の抽象化
     └─ トランザクション管理
     └─ クエリ最適化

□ Task 1.2: Creative Management 実装 (Week 5-6)
  ├─ 1.2.1 ファイルアップロード機能
  │  └─ 動画/画像アップロードAPI (Multipart)
  │  └─ S3/GCS へのファイル保存
  │  └─ ファイルサイズ・形式検証
  │  └─ プログレス表示
  │
  ├─ 1.2.2 TikTok Creative Upload連携
  │  └─ POST /v1.2/file/video/upload/
  │  └─ POST /v1.2/file/image/upload/
  │  └─ アップロードステータスポーリング
  │  └─ video_id, image_id 取得・保存
  │
  ├─ 1.2.3 メタデータ抽出
  │  └─ FFmpeg/MediaInfo で動画情報取得
  │  └─ 尺、サイズ、コーデック、音声
  │  └─ 自動サムネイル生成
  │
  ├─ 1.2.4 Creative一覧・プレビュー画面
  │  └─ Creative一覧表示
  │  └─ 動画プレビュー再生
  │  └─ ステータス表示（処理中/完了/エラー）
  │
  └─ 1.2.5 Creative検証ルール
     └─ 尺制限（5秒〜60秒推奨）
     └─ アスペクト比（9:16, 1:1, 16:9）
     └─ ファイルサイズ上限（500MB）

□ Task 1.3: AdGroup & Ad 作成実装 (Week 6-7)
  ├─ 1.3.1 AdGroup CRUD API実装
  │  └─ POST /v1.2/adgroup/create/
  │  └─ GET /v1.3/adgroup/get/
  │  └─ POST /v1.2/adgroup/update/
  │  └─ ターゲティング設定（location, age, gender, interests）
  │
  ├─ 1.3.2 Ad CRUD API実装
  │  └─ POST /v1.2/ad/create/
  │  └─ GET /v1.3/ad/get/
  │  └─ POST /v1.2/ad/update/
  │  └─ Creative紐付け（video_id, image_ids）
  │
  ├─ 1.3.3 パラメータバリデーション
  │  └─ 必須項目チェック
  │  └─ 整合性チェック（budget, bid, schedule）
  │  └─ ポリシー違反チェック（NG keyword）
  │
  └─ 1.3.4 DB保存・同期
     └─ adgroups, ads テーブル保存
     └─ TikTok IDとのマッピング
     └─ status同期（審査ステータス等）

□ Task 1.4: キャンペーン自動作成フロー (Week 7-8)
  ├─ 1.4.1 テンプレート機能
  │  └─ 目標別プリセット（APP_PROMOTION, CONVERSIONS等）
  │  └─ テンプレートDB保存
  │  └─ カスタムテンプレート作成UI
  │
  ├─ 1.4.2 推奨設定ロジック
  │  └─ 予算推奨（過去データベース）
  │  └─ 入札推奨（業界ベンチマーク）
  │  └─ ターゲティング推奨（類似Campaign分析）
  │
  ├─ 1.4.3 ワンクリック作成フロー
  │  └─ Campaign → AdGroup → Ad 一括作成
  │  └─ トランザクション制御（全成功 or 全ロールバック）
  │  └─ 作成進捗表示（ステップUI）
  │
  ├─ 1.4.4 下書き機能
  │  └─ 下書き保存（status: DRAFT）
  │  └─ 編集・レビュー
  │  └─ 承認フロー（Approver Role）
  │
  └─ 1.4.5 作成履歴・監査ログ
     └─ ChangeLogテーブル記録
     └─ 作成者・日時・パラメータ記録

□ Task 1.5: 基本最適化エンジン（ルールベース） (Week 8-9)
  ├─ 1.5.1 最適化ジョブ基盤
  │  └─ スケジューラー（2時間ごと）
  │  └─ ジョブキュー（Bull/Celery）
  │  └─ Worker Pool
  │
  ├─ 1.5.2 パフォーマンス評価ロジック
  │  └─ 過去N時間のデータ取得
  │  └─ CPA, CTR, CVR 計算
  │  └─ 目標値との比較
  │
  ├─ 1.5.3 予算再配分ルール
  │  └─ 高パフォーマンス → 予算増額（+10%）
  │  └─ 低パフォーマンス → 予算減額（-20%）
  │  └─ 上限・下限チェック
  │
  ├─ 1.5.4 入札調整ルール
  │  └─ CPA高騰 → Cost Cap減額
  │  └─ 学習停滞 → Maximum Delivery切替
  │
  ├─ 1.5.5 停止ルール
  │  └─ 連続24h コンバージョンゼロ → 停止
  │  └─ CPA > 目標CPA × 2 → 停止
  │
  └─ 1.5.6 変更記録
     └─ ChangeLogテーブル記録
     └─ 最適化理由・根拠の保存

□ Task 1.6: アラート・通知機能 (Week 9-10)
  ├─ 1.6.1 Slack連携
  │  └─ Slack App作成
  │  └─ Webhook URL設定
  │  └─ メッセージフォーマット設計
  │
  ├─ 1.6.2 アラートルール定義
  │  └─ CPA逸脱（目標比 ±30%）
  │  └─ 予算消化率異常（過消化/未消化）
  │  └─ API連続失敗（5回以上）
  │  └─ 審査落ち（Ad review REJECTED）
  │
  ├─ 1.6.3 通知送信実装
  │  └─ Slack通知
  │  └─ Email通知（SendGrid/SES）
  │  └─ 通知履歴DB保存
  │
  ├─ 1.6.4 通知設定UI
  │  └─ ユーザーごとの通知ON/OFF
  │  └─ 通知チャンネル選択
  │  └─ 閾値カスタマイズ
  │
  └─ 1.6.5 ナイトモード
     └─ 夜間（22:00-08:00）のWarning抑制
     └─ Critical のみ通知

□ Task 1.7: 権限・認可機能 (Week 10)
  ├─ 1.7.1 RBAC実装
  │  └─ Role定義（Viewer/Operator/Approver/Admin）
  │  └─ Permission定義
  │  └─ users, roles, permissions テーブル
  │
  ├─ 1.7.2 認可ミドルウェア
  │  └─ API エンドポイント保護
  │  └─ Role/Permission チェック
  │  └─ 403エラー処理
  │
  ├─ 1.7.3 承認フロー
  │  └─ Campaign作成時の承認リクエスト
  │  └─ Approverへの通知
  │  └─ 承認/却下処理
  │
  └─ 1.7.4 マルチテナント対応
     └─ Advertiser単位のデータ隔離
     └─ テナントスコープ付きクエリ

□ Task 1.8: 可観測性・ロギング (Week 10-11)
  ├─ 1.8.1 構造化ログ実装
  │  └─ JSON形式ログ出力
  │  └─ レベル別出力（DEBUG/INFO/WARN/ERROR）
  │  └─ リクエストID（Trace ID）付与
  │
  ├─ 1.8.2 メトリクス収集
  │  └─ Prometheus/Datadog 連携
  │  └─ API呼出数、エラー率、レイテンシ
  │  └─ レート制限到達率
  │  └─ OAuth更新成功率
  │
  ├─ 1.8.3 分散トレーシング
  │  └─ OpenTelemetry導入
  │  └─ Trace収集（Jaeger/Zipkin）
  │
  └─ 1.8.4 SLO/SLI定義
     └─ API成功率 ≥ 99.5%
     └─ 最適化ジョブ成功率 ≥ 99.9%
     └─ ダッシュボード設定

□ Task 1.9: 本番環境構築 (Week 11)
  ├─ 1.9.1 インフラ構築（IaC）
  │  └─ Terraform/Pulumi でインフラコード化
  │  └─ VPC, Subnet, Security Group
  │  └─ ECS/GKE/AKS クラスタ
  │  └─ RDS/Cloud SQL（PostgreSQL）
  │  └─ ElastiCache/Memorystore（Redis）
  │
  ├─ 1.9.2 Secrets管理
  │  └─ AWS Secrets Manager / GCP Secret Manager
  │  └─ TikTok API Key, OAuth Token
  │  └─ DB認証情報、外部API Key
  │
  ├─ 1.9.3 デプロイパイプライン
  │  └─ GitHub Actions → Docker Build → Push ECR/GCR
  │  └─ Blue/Green Deployment
  │  └─ Smoke Test
  │
  ├─ 1.9.4 監視・アラート設定
  │  └─ CloudWatch/Stackdriver
  │  └─ PagerDuty/Opsgenie 連携
  │  └─ オンコール体制構築
  │
  └─ 1.9.5 バックアップ・DR
     └─ DB自動バックアップ（日次）
     └─ リストア手順書
     └─ DR計画（RTO/RPO定義）

□ Task 1.10: Sandbox→本番移行 & App Review (Week 11-12) ⚠️
  ├─ 1.10.1 TikTok App Review申請
  │  └─ 本番環境URLの登録
  │  └─ Privacy Policy, Terms of Service準備
  │  └─ スクリーンショット・デモ動画提出
  │  └─ 審査対応（質問回答、修正）
  │
  ├─ 1.10.2 本番APIキー取得
  │  └─ 本番 advertiser_id 登録
  │  └─ OAuth Production URL 切替
  │
  ├─ 1.10.3 本番環境での疎通テスト
  │  └─ OAuth認証
  │  └─ Campaign作成（小規模テスト）
  │  └─ Reporting取得
  │
  └─ 1.10.4 ロールバック計画
     └─ 問題発生時のSandbox復帰手順

□ Task 1.11: Phase 1 振り返り & ドキュメント (Week 12)
  ├─ 1.11.1 MVP デモ・ユーザートレーニング
  │  └─ 運用担当者へのトレーニング
  │  └─ 操作マニュアル作成
  │
  ├─ 1.11.2 受け入れテスト
  │  └─ 10件Campaign自動作成テスト
  │  └─ 成功率95%以上確認
  │  └─ アラート動作確認
  │
  ├─ 1.11.3 パフォーマンステスト
  │  └─ 負荷テスト（100 Campaign想定）
  │  └─ レスポンスタイム測定
  │
  └─ 1.11.4 Phase 2 詳細計画
     └─ 優先機能の確定
     └─ リソース配分


================================================================================
■ Phase 2: 機能拡張 (Week 13-24)
  目標: Events API、実験フレームワーク、AI機能、外部連携
================================================================================

□ Task 2.1: Events API（サーバーサイドCV）実装 (Week 13-14)
  ├─ 2.1.1 TikTok Pixel設定
  │  └─ Pixel Code発行
  │  └─ Webサイトへのタグ埋込支援
  │
  ├─ 2.1.2 Events API Sender実装
  │  └─ POST /v1.3/event/track/ クライアント
  │  └─ 標準イベント（ViewContent, AddToCart, CompletePayment等）
  │  └─ PII ハッシュ化（SHA256）
  │
  ├─ 2.1.3 Pixel & Events API 重複排除
  │  └─ event_id 統一送信
  │  └─ TikTok側での自動重複排除
  │
  ├─ 2.1.4 バッチ送信最適化
  │  └─ イベントキュー（最大1000件/リクエスト）
  │  └─ 1分ごとのフラッシュ
  │
  └─ 2.1.5 GDPR/CCPA対応
     └─ 同意管理連携
     └─ データ削除リクエスト処理

□ Task 2.2: Webhook受信機能 (Week 14-15)
  ├─ 2.2.1 Webhook Endpoint実装
  │  └─ POST /webhook/tiktok
  │  └─ HTTPS必須
  │  └─ 200 OK即座返却
  │
  ├─ 2.2.2 署名検証
  │  └─ X-TikTok-Signature ヘッダー検証
  │  └─ HMAC-SHA256
  │  └─ Replay攻撃対策（タイムスタンプ）
  │
  ├─ 2.2.3 イベント処理
  │  └─ lead.create → CRM連携
  │  └─ ad.review_status_update → アラート
  │  └─ authorization.removed → OAuth失効処理
  │
  ├─ 2.2.4 Idempotency管理
  │  └─ event_id重複チェック
  │  └─ webhook_events テーブル保存
  │
  └─ 2.2.5 Developer Portalでの登録
     └─ Callback URL登録
     └─ Webhook Secret設定

□ Task 2.3: 実験フレームワーク（A/Bテスト） (Week 15-16)
  ├─ 2.3.1 実験設計UI
  │  └─ 実験名、仮説、期間設定
  │  └─ Arm定義（A/B/C...）
  │  └─ トラフィック配分（50/50, 70/30等）
  │  └─ 最小サンプルサイズ計算
  │
  ├─ 2.3.2 実験実行エンジン
  │  └─ AdGroup/Ad をArm別に作成
  │  └─ 予算・トラフィック配分制御
  │  └─ データ収集
  │
  ├─ 2.3.3 統計検定
  │  └─ t検定/カイ二乗検定
  │  └─ 信頼区間計算
  │  └─ p値、統計的有意性判定
  │
  ├─ 2.3.4 途中停止基準
  │  └─ Early Stopping（有意差検出）
  │  └─ Safety Gate（大幅劣化検知）
  │
  └─ 2.3.5 実験結果レポート
     └─ Winner宣言
     └─ リフト率、信頼区間
     └─ レコメンデーション

□ Task 2.4: 実験フレームワーク（MAB） (Week 16-17)
  ├─ 2.4.1 MABアルゴリズム実装
  │  └─ Thompson Sampling
  │  └─ ε-greedy
  │  └─ UCB (Upper Confidence Bound)
  │
  ├─ 2.4.2 事前分布設定
  │  └─ Beta分布（二項報酬）
  │  └─ Normal分布（連続報酬）
  │  └─ 階層ベイズモデル
  │
  ├─ 2.4.3 動的予算配分
  │  └─ 各Armの事後分布更新
  │  └─ サンプリング → 予算配分
  │  └─ 探索率下限（10%）
  │
  ├─ 2.4.4 後悔（Regret）計算
  │  └─ 累積後悔の追跡
  │  └─ 最適Armとの差分
  │
  └─ 2.4.5 MAB実験レポート
     └─ Arm別パフォーマンス推移
     └─ 探索/活用バランス可視化

□ Task 2.5: AI最適化（基礎） (Week 17-19)
  ├─ 2.5.1 特徴量エンジニアリング
  │  └─ Creative特徴（尺、アスペクト比、音声有無）
  │  └─ Audience特徴（年齢、性別、地域、興味）
  │  └─ 時系列特徴（曜日、時間帯、季節性）
  │  └─ Feature Store構築（Feast/Tecton）
  │
  ├─ 2.5.2 予測モデル開発（CVR予測）
  │  └─ 勾配ブースティング（XGBoost/LightGBM）
  │  └─ クロスバリデーション
  │  └─ ハイパーパラメータチューニング
  │  └─ モデル評価（AUC, Precision, Recall）
  │
  ├─ 2.5.3 モデルサービング
  │  └─ MLflow Model Registry
  │  └─ TensorFlow Serving / FastAPI
  │  └─ 推論APIエンドポイント
  │
  ├─ 2.5.4 オンライン学習
  │  └─ ミニバッチ更新
  │  └─ モデル再学習スケジューラ（週次）
  │  └─ A/Bテストでの新モデル検証
  │
  └─ 2.5.5 予測結果の活用
     └─ 高CVR Creative優先配信
     └─ 低CVR Creative早期停止

□ Task 2.6: クリエイティブ提案機能（生成AI） (Week 19-20)
  ├─ 2.6.1 LLM連携（OpenAI/Claude API）
  │  └─ テキスト生成（ad_text, CTA改善案）
  │  └─ プロンプト設計
  │  └─ 安全フィルタ（有害コンテンツ検出）
  │
  ├─ 2.6.2 画像生成AI連携（DALL-E/Midjourney API）
  │  └─ サムネイル生成
  │  └─ バリエーション作成
  │
  ├─ 2.6.3 動画編集AI（FFmpeg + スクリプト）
  │  └─ 字幕自動挿入
  │  └─ フック強化（冒頭3秒最適化）
  │  └─ アスペクト比変換
  │
  ├─ 2.6.4 提案UI
  │  └─ 改善案の表示
  │  └─ プレビュー
  │  └─ 採用/却下
  │
  └─ 2.6.5 生成コンテンツの監査ログ
     └─ 生成元プロンプト記録
     └─ 承認フロー

□ Task 2.7: MMP連携（AppsFlyer/Adjust） (Week 20-21)
  ├─ 2.7.1 Postback URL設定
  │  └─ TikTok Ads Manager でPostback URL登録
  │  └─ AppsFlyer/Adjust でのイベント設定
  │
  ├─ 2.7.2 Postback受信エンドポイント
  │  └─ POST /postback/appsflyer
  │  └─ POST /postback/adjust
  │  └─ イベントパース（install, in_app_event）
  │
  ├─ 2.7.3 Attribution統合
  │  └─ TikTok Click ID（ttclid）マッピング
  │  └─ Conversion紐付け
  │  └─ LTV計算
  │
  └─ 2.7.4 LTVベース最適化
     └─ 高LTVユーザーの特徴分析
     └─ Lookalike Audience作成

□ Task 2.8: DWH連携・データパイプライン (Week 21-22)
  ├─ 2.8.1 ETLパイプライン構築
  │  └─ Airflow/dbt セットアップ
  │  └─ 日次データ抽出（Reporting API）
  │  └─ 変換・正規化
  │  └─ BigQuery/Redshift/Snowflake ロード
  │
  ├─ 2.8.2 社内データ統合
  │  └─ 売上データ結合
  │  └─ 顧客データ（CDP）結合
  │  └─ ROAS計算
  │
  ├─ 2.8.3 BI連携
  │  └─ Looker/Tableau/Power BI
  │  └─ ダッシュボードテンプレート
  │
  └─ 2.8.4 データ品質監視
     └─ データ欠損検知
     └─ 異常値検知
     └─ アラート

□ Task 2.9: Slack/Teams高度連携 (Week 22)
  ├─ 2.9.1 インタラクティブメッセージ
  │  └─ ボタン付きメッセージ（承認/却下）
  │  └─ モーダルフォーム
  │
  ├─ 2.9.2 Slackコマンド
  │  └─ /tiktok-stats campaign_id
  │  └─ /tiktok-alert-settings
  │
  ├─ 2.9.3 日次レポート自動配信
  │  └─ 前日パフォーマンスサマリ
  │  └─ Top/Flop Creative
  │  └─ アラート履歴
  │
  └─ 2.9.4 Jira連携
     └─ 審査落ち時の自動チケット起票
     └─ Creative制作依頼ワークフロー

□ Task 2.10: Phase 2 振り返り (Week 23-24)
  ├─ 2.10.1 機能デモ・フィードバック
  │  └─ Events API動作確認
  │  └─ 実験フレームワーク検証
  │  └─ AI提案精度評価
  │
  ├─ 2.10.2 パフォーマンス評価
  │  └─ CPA改善率測定（Phase 1比）
  │  └─ 運用工数削減率
  │
  └─ 2.10.3 Phase 3 計画


================================================================================
■ Phase 3: 最適化・スケーリング (Week 25-36)
  目標: ポートフォリオ最適化、What-ifシミュレーション、大規模対応
================================================================================

□ Task 3.1: ポートフォリオ最適化（複数Campaign横断） (Week 25-27)
  ├─ 3.1.1 ポートフォリオ定義
  │  └─ 複数Campaignのグルーピング
  │  └─ 全体予算上限設定
  │  └─ 全体目標KPI設定
  │
  ├─ 3.1.2 最適配分アルゴリズム
  │  └─ 線形計画法（最適化ソルバー: PuLP/OR-Tools）
  │  └─ 制約条件（予算上限、最低配信額）
  │  └─ 目的関数（総CV最大化、CPA最小化）
  │
  ├─ 3.1.3 動的リバランス
  │  └─ 日次でのポートフォリオ再配分
  │  └─ パフォーマンス変動への適応
  │
  └─ 3.1.4 ポートフォリオダッシュボード
     └─ 全体進捗表示
     └─ Campaign別寄与度

□ Task 3.2: What-ifシミュレーション (Week 27-28)
  ├─ 3.2.1 因果推論モデル
  │  └─ DID (Difference-in-Differences)
  │  └─ 傾向スコアマッチング
  │  └─ 反実仮想効果推定
  │
  ├─ 3.2.2 シミュレーター実装
  │  └─ 予算変更時の予測CV数
  │  └─ 入札変更時の予測CPA
  │  └─ ターゲティング変更時の影響
  │
  ├─ 3.2.3 シミュレーションUI
  │  └─ パラメータ入力フォーム
  │  └─ 予測結果グラフ表示
  │  └─ 信頼区間表示
  │
  └─ 3.2.4 推奨アクション提示
     └─ ROI最大化のための提案
     └─ リスク評価

□ Task 3.3: 高度なアラート・異常検知 (Week 28-29)
  ├─ 3.3.1 機械学習ベース異常検知
  │  └─ 時系列異常検知（Prophet/ARIMA）
  │  └─ 多変量異常検知（Isolation Forest）
  │
  ├─ 3.3.2 予測アラート
  │  └─ 「明日予算不足の可能性」
  │  └─ 「目標未達の予測」
  │
  ├─ 3.3.3 根本原因分析
  │  └─ パフォーマンス低下要因の自動特定
  │  └─ Creative/Audience/時間帯別の分解
  │
  └─ 3.3.4 自動復旧アクション拡張
     └─ 代替Creativeへの自動切替
     └─ ターゲティング自動調整

□ Task 3.4: スケーラビリティ対応 (Week 29-31)
  ├─ 3.4.1 水平スケーリング
  │  └─ API Connector の並列化（最大10並列）
  │  └─ Worker数の動的調整（Auto Scaling）
  │  └─ DB接続プール最適化
  │
  ├─ 3.4.2 キャッシング戦略拡充
  │  └─ Redis多層キャッシュ
  │  └─ CDN活用（静的アセット）
  │  └─ API レスポンスキャッシュ
  │
  ├─ 3.4.3 非同期Reporting活用拡大
  │  └─ 大規模データ（1万行以上）は非同期
  │  └─ タスクキュー管理
  │
  ├─ 3.4.4 DB最適化
  │  └─ パーティショニング（日付別）
  │  └─ インデックス最適化
  │  └─ マテリアライズドビュー
  │
  └─ 3.4.5 負荷テスト
     └─ 1,000+ Campaign, 1万CR規模
     └─ レスポンスタイム測定
     └─ ボトルネック特定・改善

□ Task 3.5: SLO/SLI整備・信頼性向上 (Week 31-32)
  ├─ 3.5.1 SLI/SLO定義精緻化
  │  └─ API成功率 ≥ 99.5%
  │  └─ 最適化ジョブ成功率 ≥ 99.9%
  │  └─ P95レイテンシ ≤ 2秒
  │  └─ レポート鮮度 ≤ 1時間
  │
  ├─ 3.5.2 Error Budget管理
  │  └─ 月次Error Budget計算
  │  └─ Burndown Rate監視
  │  └─ 超過時のデプロイ凍結ポリシー
  │
  ├─ 3.5.3 Chaos Engineering
  │  └─ TikTok API障害シミュレーション
  │  └─ DB障害シミュレーション
  │  └─ 復旧時間測定
  │
  └─ 3.5.4 Runbook拡充
     └─ インシデント対応手順詳細化
     └─ オンコールプレイブック

□ Task 3.6: セキュリティ強化 (Week 32-33)
  ├─ 3.6.1 脆弱性診断
  │  └─ OWASP Top 10 チェック
  │  └─ 依存ライブラリスキャン（Snyk/Dependabot）
  │  └─ ペネトレーションテスト
  │
  ├─ 3.6.2 暗号化強化
  │  └─ At-Rest暗号化（DB, S3/GCS）
  │  └─ In-Transit暗号化（TLS 1.3）
  │  └─ KMS鍵ローテーション自動化
  │
  ├─ 3.6.3 アクセス制御強化
  │  └─ 最小権限原則の徹底
  │  └─ IAM Role分離
  │  └─ MFA強制
  │
  └─ 3.6.4 監査ログ拡充
     └─ 改ざん防止（署名）
     └─ 長期保存（7年）
     └─ コンプライアンスレポート

□ Task 3.7: UI/UX改善 (Week 33-34)
  ├─ 3.7.1 ダッシュボード高度化
  │  └─ リアルタイム更新（WebSocket）
  │  └─ カスタマイズ可能ウィジェット
  │  └─ ドリルダウン分析
  │
  ├─ 3.7.2 モバイル対応
  │  └─ レスポンシブデザイン
  │  └─ PWA化
  │
  ├─ 3.7.3 アクセシビリティ
  │  └─ WCAG 2.1 AA準拠
  │  └─ スクリーンリーダー対応
  │
  └─ 3.7.4 ユーザビリティテスト
     └─ 運用担当者へのヒアリング
     └─ UI改善点の洗い出し

□ Task 3.8: ドキュメント・トレーニング整備 (Week 34-35)
  ├─ 3.8.1 技術ドキュメント
  │  └─ アーキテクチャ図更新
  │  └─ API仕様書更新
  │  └─ データモデルER図
  │
  ├─ 3.8.2 運用マニュアル
  │  └─ 日次運用手順
  │  └─ トラブルシューティングガイド
  │  └─ FAQ
  │
  ├─ 3.8.3 トレーニング資料
  │  └─ 新規運用者向けオンボーディング
  │  └─ 機能別チュートリアル動画
  │
  └─ 3.8.4 ナレッジベース
     └─ ベストプラクティス集
     └─ ケーススタディ

□ Task 3.9: Phase 3 総合テスト・最終評価 (Week 35-36)
  ├─ 3.9.1 受け入れ基準検証
  │  └─ 自動作成成功率95%+
  │  └─ 連続30日 最適化サイクル停止ゼロ
  │  └─ CPA 10%以上改善
  │  └─ MTTR ≤ 15分
  │
  ├─ 3.9.2 性能テスト
  │  └─ 1,000 Campaign 同時管理
  │  └─ 1万CR規模
  │  └─ レスポンスタイム基準達成
  │
  ├─ 3.9.3 本番運用開始
  │  └─ ステークホルダー報告
  │  └─ 正式リリース
  │
  └─ 3.9.4 継続改善計画
     └─ ロードマップ v2.0策定
     └─ 他媒体展開検討（Meta/Google Ads）


================================================================================
■ 継続タスク（全Phase共通） 🔄
================================================================================

□ 継続-1: APIドキュメント監視
  └─ TikTok Developer Portal 通知購読
  └─ API仕様変更の早期検知
  └─ 契約テスト（Pact）の定期実行

□ 継続-2: 依存ライブラリ更新
  └─ セキュリティパッチ適用
  └─ 月次での依存関係更新
  └─ 破壊的変更の影響確認

□ 継続-3: データバックアップ検証
  └─ 週次リストアテスト
  └─ バックアップ整合性チェック

□ 継続-4: パフォーマンス監視
  └─ 日次SLI/SLOダッシュボード確認
  └─ 月次パフォーマンスレビュー

□ 継続-5: ユーザーフィードバック収集
  └─ 週次運用者ヒアリング
  └─ 改善要望の優先度付け


================================================================================
【タスク管理のベストプラクティス】
================================================================================

1. **スプリント管理**
   - 2週間スプリント
   - スプリントゴール明確化
   - デイリースタンドアップ（15分）

2. **タスク管理ツール**
   - Jira/Linear/GitHub Projects
   - カンバンボード活用
   - WIP制限（担当者あたり2タスクまで）

3. **リスク管理**
   - ⚠️マークのタスクは早期着手
   - ブロッカーの即座escalation
   - 週次リスクレビュー

4. **品質管理**
   - 各タスク完了時のCode Review必須
   - 自動テストカバレッジ ≥ 80%
   - Definition of Done チェックリスト

5. **ドキュメント**
   - 実装と同時にドキュメント更新
   - ADR (Architecture Decision Record) 記録
   - 週次で技術ブログ/社内Wiki更新


================================================================================
【クリティカルパス】
================================================================================

最短でMVPに到達するためのクリティカルパス:

Week 1-2:  0.1 → 0.2 → 0.3 → 0.4  (基盤+認証)
Week 2-3:  0.5 → 0.6              (Campaign+Reporting)
Week 3-4:  0.7                     (ダッシュボード)
Week 5-7:  1.1 → 1.2 → 1.3 → 1.4  (データ+Creative+自動作成)
Week 8-9:  1.5 → 1.6              (最適化+アラート)
Week 10-12: 1.9 → 1.10 → 1.11     (本番環境+移行)

このパスを遵守すれば、12週間でMVP完成可能。


================================================================================
以上
